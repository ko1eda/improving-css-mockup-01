/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* This will remove the default browser styling */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* 
project wide style definitions
Over-flow-x: hidden makes it so
    any absolutely positioned elements 
    whose content boxes extend outside their
    containers will not cause a horizontal bar
    to appear and stretch the view. 
*/
body {
    font-family: "Lato", "sans-serif";
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
    overflow-x:hidden;
}

/* 
vh:sets the header to 95 percent of the viewport height always 
bg-size cover: fits the image to the size of the viewport
bg-postion: top makes sure when the page is moved the image cascades from the top
*/
.header{
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.7),
        rgba(85, 197, 122,0.7)
        ),
        url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative;
}

.logo-box{
    position: absolute;
    top: 40px;
    left: 40px;
}
#logo{
   height:35px;
}

/* 
tansfrom:translate(): 
    this centers the x and y axis on the middle of the content box
    the default would be on the outer edges of the content box, which
    would not center the box on the page. 
top: 
    40% not 50%- this is because the clip makes it look like the element 
    is too low when it is exactly centered.
text-align:
    This is to align the inline-block button element, since inline block elements
    can essentially be treated as text with block-level properties 
.h-primary{margin-bottom:}
    this is to space the button down from the heading primary element,
    could also put this as margin-top on the .btn-white class instead i think.
.heading-prim-main 
    Display: block- so that each one will take up one line
        b/c spans are by default in-line elements
        this will space each line without having to use br tags (bad).
    animation-name & duration: name of the animation you created and its time active
        you can do this in one line like below..
 */
.heading-box{
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%,-50%);
    text-align: center;
}
.heading-primary{
    color: white;
    text-transform: uppercase;  
    font-weight: 400;
    backface-visibility: hidden;
    margin-bottom: 60px;
}
.heading-primary-main{
    display: block;
    font-size: 60px;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1000ms;
    animation-timing-function: ease-out;
}
.heading-primary-sub{
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.5px;
    animation: moveInRight 1000ms ease-out;
}

/* 
% {}: 
    you can have any number of percentages
    to specify points at which you want
    specific things to take place in the animation.
  translateX(): 
    this starts from -100 px in the x direction (think of x and y graph how there can be -x vals)
    and transitions it in to its original postion (0).
    if you set the number to -100% it will start at the left width of the parent element (header).
*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100%);
    }
    80% {
        transform: translateX(10px);
    }
    100%{
        opacity: 1;
        transform: translate(0);
    }
}
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(10px);
    }
    100%{
        opacity: 1;
        transform: translate(0);
    }       
}


/*.btn:
    Creating own button by removing default styling
    from the anchor element.
    inline-block: to give it block properties and keep it in flow without taking up 
    the entire witdth of the header container
:link,:visited:
    pusedo class selectors that styles link 
    before and after visit respectively
:active:
    this has a small -1px hover that makes the button raise on the y axis by 1px on click
    causing it to appear as it has been pressed down pn release.
    box shadow is decreased here to make it look as if the button is pressed down
positon:
    relative b/c we need to set the ::after psuedo element to hide behind the button,
    by setting its absolute position to top 0 left 0, relative to the original button
    it will be directly under it...
*/
.btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    /* high pixel values will make rounded pill shaped edges */
    border-radius: 100px;
    transition: all 100ms ease-out;
    position: relative;
}
.btn:hover{
    transform: translateY(-3px);
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
}
.btn:active{
    transform: translateY(-1px);
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);
}
.btn-white{
    color: #777;
    background-color: white;   
}
/*::after :
    this is a psuedo element, esentially it hides behind the regular element,
    then appears after a certain action is preformed, then hides again..
height & width : 100% 
    this is because the psuedo element is essentially treated as a child of the element
    its applied to, so you are saying height and width are the same (100%) of its parent (.btn)
z-index:
    this determines which elements will be displayed when they are stacked ontop of each other
    higher z-index elements have priority over low elements and this is LOWWW!
*/
.btn::after{
    content: "";
    display: inline-block;
    width: 100%;
    height: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 500ms ease-out;
}
.btn-white::after{
    background-color: white;
}
.btn:hover::after{
    transform: scale(1.5);
    opacity: 0; 
}

